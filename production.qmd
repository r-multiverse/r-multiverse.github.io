---
title: "Production repository"
---

```{r, eval = TRUE, echo = FALSE}
source("R/utils.R")
```

The Production repository comprises a subset of [Community](community.md) package releases
which are mutually compatible and meet a high standard of quality.

## Users

Production deploys in [periodic snapshots throughout the year](#schedule).
Prior to each snapshot, packages are tested in a month-long [Staging](#staging) cycle
in which healthy packages from [Community](community.md), dependencies from [CRAN](https://cran.r-project.org/),
and the version of base R are all held constant.^[The patch version of base  R may change, but the major and minor versions are held constant.]

The current Production snapshot was deployed on `r snapshot_date()` after [one month of testing](#staging) against R version `r snapshot_r()` and [CRAN](https://cran.r-project.org/) dependencies from `r staging_date()`.
For optimal compatibility, please use [Production](production.qmd) with R `r snapshot_r()` and the [Posit Public Package Manager (p3m)](https://packagemanager.posit.co) snapshot of CRAN from `r staging_date()`.


```{r, eval = TRUE, echo = FALSE, results = "asis"}
text <- c(
  "```r",
  "getRversion()",
  sprintf("#> [1] ‘%s’\n", snapshot_r()),
  "install.packages(",
  "  \"polars\",",
  "  repos = c(",
  "    \"https://production.r-multiverse.org\",",
  sprintf("    \"https://packagemanager.posit.co/cran/%s\"", staging_date()),
  "  )",
  ")",
  "```"
)
cat(text, sep = "\n")
```

## Status

The [Production status page](https://r-multiverse.org/status/production.html) lists all the packages staged for the next Production snapshot. 

## Checks

To reach Production, a package release must comply with all R-multiverse [policies](policies.md), and it must pass the following automated checks:

#### Legal

* The package must have a [free and open-source license](https://en.wikipedia.org/wiki/Free_and_open-source_software).

#### Security

* The release must not have an active [security advisory](https://github.com/RConsortium/r-advisory-database).

#### Quality

* `R CMD build` and `R CMD check` must pass in the [Staging universe](https://staging.r-multiverse.org) (no errors or warnings) on Mac, Windows, and Linux. These checks use the versions of base R and CRAN packages from the first day of the current [Staging cycle](production.qmd#staging).

#### Documentation

* The version number of the current release must be strictly greater than the version numbers of all previous releases of the package.
* If the package is on both CRAN and R-multiverse, the CRAN version number must not be higher than the R-multiverse one. 

#### Dependencies

* The `DESCRIPTION` file must not include a `Remotes:` field.
* The package must not strongly depend (`Depends:`, `Imports:`, `LinkingTo:`) on an R-multiverse package with any of the above check issues.
^[An R-multiverse package can strongly depend a package from CRAN, regardless of CRAN check status, as long as that package remains available on CRAN.]

## Snapshots

Once every 3 months, Production updates all its packages simultaneously and deploys a snapshot.
Production does not add, remove, or update packages at any other time.
^[A package is only removed from a snapshot if it becomes absolutely necessary to do so,
e.g. because of an egregious [policy](policies.md) violation.]
Packages change slowly in Production, but they are mutually compatible.
^[And compatible with versions of dependencies that were on CRAN at the time of the snapshot.]

## Staging

Rather than pull releases directly from [Community](community.md),
Production draws from an intermediate repository called [Staging](#staging).
The [Staging](#staging) repository is active during the month-long period just prior to each snapshot.
During that time:

1. The versions of base R and dependencies from CRAN do not change.^[The patch version of R may change, but the major and minor versions do not change during a [Staging](#staging) cycle.]
1. No package can enter or leave the Staging repository.
1. Once a package passes [R-multiverse checks](#checks) in Staging, it becomes staged:
the version of the package in Staging is locked, and that version is guaranteed entry into the next Production snapshot.
Staged packages are continuously reffreshed on the [Production status page](https://r-multiverse.org/status/production.html). 

At the end of this month-long activity period, Production creates a snapshot from the subset of package releases in [Staging](#staging) which pass [R-multiverse checks](#checks).

In the month immediately following the snapshot, nothing changes in [Staging](#staging).
This inactivity phase gives time for [R-multiverse administrators](team.md#administrators) to fix any unforeseen problems with the snapshot.

In the month following the inactivity period, [Staging](#staging) undergoes a reset phase
in which an entirely new and upgraded set of [Community](community.md) packages join and become candidates for the next Production snapshot.

## Schedule

Every year, [Staging](#staging) and Production follow a schedule given by the dates below.

| Quarter | [Staging](#staging) reset phase begins | [Staging](#staging) becomes active | Production snapshot |
|---|---|---|---|
| Q1 | January 15 | February 15 | March 15 |
| Q2 | April 15 | May 15 | June 15 |
| Q3 | July 15 | August 15 | September 15 |
| Q4 | October 15 | November 15 | December 15 |

## Status

R-multiverse has a [status system](https://r-multiverse.org/status/index.html) to broadcast the latest [R-multiverse check results](#checks) of each package.
In each of [Community](community.md) and [Staging](#staging), there is an HTML page for every package.
Example:

* <https://r-multiverse.org/status/community/polars.html>
* <https://r-multiverse.org/status/staging/polars.html>

In addition, each package has an RSS feed that updates on each new package release to each repository:^[except in Staging when Staging is currently inactive.]

* <https://r-multiverse.org/status/community/polars.xml>
* <https://r-multiverse.org/status/staging/polars.xml>

## Debugging

`R CMD check` errors in [Staging](#staging)
may be difficult to diagnose. 
For example, [Staging](#staging) might have different versions
of dependencies than you have on your local machine.

The [`packages.json`](https://github.com/r-multiverse/staging/blob/main/packages.json)
file has all the Git commit hashes
of all the versions of packages in [Staging](#staging).
If you can identify the specific
dependency that is causing problems, you can install the version in [Staging](#staging)
and reproduce the issue locally.
For example, if [`packages.json`](https://github.com/r-multiverse/staging/blob/main/packages.json)
lists a dependency:

```json
  {
    "package": "polars",
    "url": "https://github.com/pola-rs/r-polars",
    "branch": "a76b8d56e6f39a6157880069f9d32f3cc1f574d7"
  },
```

then you can install the version of that dependency from R:

```r
pak::pkg_install("pola-rs/r-polars@a76b8d56e6f39a6157880069f9d32f3cc1f574d7")
```

then restart R and run the following to reproduce the issue:

```r
devtools::check("yourPackage")
```

Alternatively, you can create your own personal [universe](https://r-universe.dev),
give it a strategic subset of dependencies from
[`packages.json`](https://github.com/r-multiverse/staging/blob/main/packages.json),
and omit the `"branch"` field from your package so the checks run on every commit.
Visit <https://ropensci.org/r-universe/> to learn more about using R-universe directly.
